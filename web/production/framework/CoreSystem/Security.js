/*
 * Security.js
 * Security routines for the Prefiniti framework
 *
 * John Willis
 * john@prefiniti.com
 *
 * Copyright (C) 2008, AJL Intel-Properties, LLC.
 */
 
var AuthenticationRecord = null;
var HP_SessionKey = null;

function PAuthenticationRecord(UserID, Username, SiteID, AssociationID, DesktopTheme, PAFFLAGS, AutoCatalog, Theme) 
{
	this.UserID = UserID;
	this.Username = Username;
	this.SiteID = SiteID;
	this.AssociationID = AssociationID;
	this.DesktopTheme = DesktopTheme;
	this.PAFFLAGS = PAFFLAGS;
	this.AutoCatalog = AutoCatalog;
	this.FrameworkRevision = 2.0;
	this.Theme = Theme;
	GlobPAFFLAGS = PAFFLAGS;
}

PAuthenticationRecord.prototype.XLatToLegacy = function () {
	glob_userid = this.UserID;
	glob_userName = this.Username;
	glob_current_association = this.AssociationID;
	glob_current_site_id = this.SiteID;
	glob_PDMDefaultTheme = this.DesktopTheme;
	glob_FrameworkRevision = this.FrameworkRevision;	
};


var ACLboxes = 0;
function PObjectACL(ObjectTypeID, ObjectID)
{
	
}

function PLoginDialog()
{	
	dtEl = new PElement(CurrentDesktop);
	dtEl.LoadText("");
	dtEl.Hide();
	DesktopCount = 0;
	
	lbEl = new PElement("HostInfox");
	lbEl.Hide();
	
	showDiv('BeginButton');
	Desktops = new Array(1);
	

	AuthenticationRecord = null;
	p_session = null;
	ClearTasks();
	UnTip();
	ClearLogin();
	SystemSound('SESSION_LOGOUT');
}

function PSignOut()
{
	var rh = new KRequestHeaders();
	rh.Add(new KRequestParam('HP_SessionKey', HP_SessionKey));
	rh.Add(new KRequestParam('current_association_id', AuthenticationRecord.AssociationID));
	rh.Add(new KRequestParam('current_site_id', AuthenticationRecord.SiteID));
	rh.Add(new KRequestParam('CalledByUser', AuthenticationRecord.UserID));
	
	
	BrowserHandle = null;
	Menus = new Array();
	CurrentHighlight = null;
	
	var retval = KSynchronousRequest('/Framework/CoreSystem/Security/Resources/PSignOut.cfm', rh);
	
	PLoginDialog();
}

function PAuthenticate(Username, Password)
{
	var unRP = new KRequestParam("username", Username);
	var pwRP = new KRequestParam("password", Password);
	var phkRP = new KRequestParam("HP_PrefinitiHostKey", HP_PrefinitiHostKey);
	var ipRP = new KRequestParam("HP_CGI_NetworkNode", HP_CGI_NetworkNode);
	var browserRP = new KRequestParam("HP_Browser", HP_Browser);
	var osRP = new KRequestParam("HP_OS", HP_OS);
	var uidRP = null;
	
	var parsedDoc = null;
	
	var requestHdr = new KRequestHeaders();
	var sessionMgrRH = new KRequestHeaders();
	var sessionMgr = null;
	
	with (requestHdr) {
		Add(unRP);
		Add(pwRP);
	}
	
	with (sessionMgrRH) {
		Add(unRP);
		Add(pwRP);
		Add(phkRP);
		Add(ipRP);
		Add(browserRP);
		Add(osRP);
	}
	
	parsedDoc = KParseXML(KSynchronousRequest('/Framework/CoreSystem/Security/Resources/PAuthenticationRecord.cfm', requestHdr));
	
	
	var authStat = KGetSingleTag(parsedDoc, "success");
	
	if(authStat != 'false') {
		PLoadAuthenticationRecord(parsedDoc);
		
		uidRP = new KRequestParam("user_id", AuthenticationRecord.UserID);
		sessionMgrRH.Add(uidRP);
		
		sessionMgr = KSynchronousRequest('/Framework/CoreSystem/Security/Resources/PGetSession.cfm', sessionMgrRH);
		HP_SessionKey = sessionMgr.trim();
		
		
		
		//InitializePrefiniti();
		
		var thisDesktop = new Desktop(AuthenticationRecord, TM_OPEN);
		
		DTInstall(thisDesktop);
		DTSwitchTo(thisDesktop);
	}
	else {
		LoginError("Could not sign in: " + KGetSingleTag(parsedDoc, "failurereason"));
	}
}

function PSwitchAssoc(AssocID, SiteID)
{
	AuthenticationRecord.AssociationID = AssocID;
	AuthenticationRecord.SiteID = SiteID;
	
	AuthenticationRecord.XLatToLegacy();
	
	try {
	p_session.Framework.FindWindow('PSessionBar').RefreshClientArea();
	} catch (ex) {}
	
	if(p_session.Framework.FindWindow('Prefiniti15Browser')) {
		AjaxRefreshTarget();
	}
}

function PLoadAuthenticationRecord(parsedDoc) 
{
	var userid;
	var username;
	var siteid;
	var associationid;
	var desktoptheme;
	var pafflags;
	var autocatalog;
	var theme;
	
	userid = KGetSingleTag(parsedDoc, "userid");
	username = KGetSingleTag(parsedDoc, "username");
	siteid = KGetSingleTag(parsedDoc, "siteid");
	associationid = KGetSingleTag(parsedDoc, "associationid");
	desktoptheme = KGetSingleTag(parsedDoc, "desktoptheme");
	pafflags = parseInt(KGetSingleTag(parsedDoc, "pafflags"));
	autocatalog = KGetSingleTag(parsedDoc, "autocatalog");
	theme = KGetSingleTag(parsedDoc, "theme");
	
	AuthenticationRecord = new PAuthenticationRecord(userid, username, siteid, associationid, desktoptheme, pafflags, autocatalog, theme);
	AuthenticationRecord.XLatToLegacy();
}

function PSessionBar() 
{
	/* Window code generated by Prefiniti Development System 1.0.2 */

	var wRef = p_session.Framework.FindWindow('PSessionBar');
	if (!wRef) {
		var PSB_handle = 'PSessionBar';
		var PSB_title  = 'Member Services';
		var PSB_icon   = new PIcon('/graphics/AppIconResources/crystal_project/16x16/actions/agt_member.png', P_SMALLICON);
		var PSB_rect   = new PRect(0, 0, 520, 400);
		var PSB_style  = WS_ALLOWCLOSE | WS_ALLOWMINIMIZE | WS_SHOWAPPMENU | WS_ENABLEPDM | WS_ALLOWRESIZE | WS_ALLOWMAXIMIZE;
		var PSB_MessageHandler  = null;
		var PSB_BackgroundColor = new PColor(255, 255, 255);
	
		var PSB_window = new PWindow(PSB_handle, PSB_title, PSB_rect, PSB_icon, PSB_style, PSB_MessageHandler, PSB_BackgroundColor);
	
		wRef = p_session.Framework.CreateWindow(PSB_window);
		PSB_ClientAreaURL = '/framework/CoreSystem/DesktopTools/SessionBar.cfm';

		wRef.LoadClientArea(PSB_ClientAreaURL);
	
		var orc = function () {
			p_session.Framework.SetFocus(PSB_handle);
		};
		var PSB_ToolbarStripURL = '/framework/CoreSystem/DesktopTools/SessionBar_Toolbar.cfm';
		wRef.LoadToolbarStrip(PSB_ToolbarStripURL, orc);
	
	}
	
	

}

function PauseDataTransfer() {
	DataTransferPaused = true;
}

function ResumeDataTransfer() {
	DataTransferPaused = false;
}


function KSessionMonitor()
{
	var rh = new KRequestHeaders();
	rh.Add(new KRequestParam("HP_SessionKey", HP_SessionKey));
	
	SessionStatus = KSynchronousRequest('/Framework/CoreSystem/Security/Resources/KSessionMonitor.cfm', rh);
	SessionStatus.trim();
	
	
	var kab = null;
	switch(SessionStatus) {
		case '%%NONET:: ':
			kab = new AlertBox("Unable to verify your session. This could be due to a problem with your computer's Internet connection.<br><br>Prefiniti will work in offline mode until the network becomes available again.", "Session Verification Failure", "/graphics/AppIconResources/crystal_project/32x32/devices/socket.png");
			kab.Show();
			PauseDataTransfer();
			break;
		case '%%ACTIV:: ':
			if(DataTransportPaused) {
				try {
				kab = new AlertBox("Your session has been verified and your Internet connection is working again. Prefiniti will be placed in online mode.", "Session Resume", "/graphics/AppIconResources/crystal_project/32x32/devices/socket.png");
				kab.Show();
				} catch (ex) {}
				ResumeDataTransfer();
			}
			break;
		case '%%FWREL:: ':
			alert("Your Prefiniti session has been restarted remotely.");
			location.replace('/');
			break;
		case '%%CLOSE:: ':
			PLoginDialog();
			LoginError("Your session has been closed remotely.");
			break;
	}			
}

function LoginError(text) 
{
	SetInnerHTML('LoginError', '<img src="/graphics/exclamation.png" align="absmiddle"> ' + text);
	showDiv('LoginError');
	SystemSound('SND_ERROR');
}

function ClearLogin() 
{
	SetInnerHTML('LoginError', '');
	hideDiv('LoginError');
	SetValue('UserName', '');
	SetValue('Password', '');
}



function SetSessionState(SessionID, NewState)
{	
	var rh = new KRequestHeaders();
	rh.Add(new KRequestParam("SessionID", SessionID));
	rh.Add(new KRequestParam("NewState", NewState));
	
	var result = KSynchronousRequest('/Framework/CoreSystem/HTMLResources/KillSession.cfm', rh);
	SetInnerHTML('MS_Status', result);
}


function SetPassword(id, pw, pwConfirm)
{
	
	if (pw != pwConfirm) {
		alert('The passwords you entered do not match.');
		return;
	}
	
	var url;
	url = "/Framework/CoreSystem/Security/Resources/SetPassword.cfm";
	
	var rh = new KRequestHeaders();
	rh.Add(new KRequestParam("id", id));
	rh.Add(new KRequestParam("password", pw));
	
	
	var res = KSynchronousRequest(url, rh);
	SetInnerHTML('ibt', res);
}

function CreateSiteDialog() 
{
	/* Window code generated by Prefiniti Development System 1.0.3 */
	var TP_handle = 'CreateSite';
	 
	var wRef = p_session.Framework.FindWindow(TP_handle);
	if (!wRef) {
		var TP_title  = 'Create Site';
		var TP_icon   = new PIcon('/graphics/group_add.png', P_SMALLICON);
		var TP_rect   = new PAutoRect(450, 250);
		var TP_style  = WS_ALLOWCLOSE | WS_ALLOWMINIMIZE | WS_ALLOWMAXIMIZE | WS_ALLOWREFRESH | WS_ALLOWRESIZE | WS_SHOWAPPMENU | WS_ENABLEPDM;
		var TP_MessageHandler  = null;
		var TP_BackgroundColor = new PColor(255, 255, 255);

		var TP_window = new PWindow(TP_handle, TP_title, TP_rect, TP_icon, TP_style, TP_MessageHandler, TP_BackgroundColor);
	 
		wRef = p_session.Framework.CreateWindow(TP_window);	
	}
	TP_ClientAreaURL = '/Framework/CoreSystem/HTMLResources/CreateSite.cfm';
	wRef.LoadClientArea(TP_ClientAreaURL);
}

function CreateSite(siteName)
{
	var rh = new KRequestHeaders();
	rh.Add(new KRequestParam("SiteName", siteName));
	
	var url = '/Framework/CoreSystem/HTMLResources/CreateSiteSubmit.cfm';
	
	return KSynchronousRequest(url, rh);
}