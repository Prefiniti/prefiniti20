/*
 * Calculator.js
 * The Prefiniti Desktop Calculator 
 * 
 * Author: jpw
 * Copyright (C) 2009, AJL Intel-Properties LLC
 *
 */
 
function Calculator()
{
	this.Result = 0;
}

Calculator.prototype.Show = function (num) {
	/* Window code generated by Prefiniti Development System 1.0.3 */
	var SWC_handle = 'SysWidget_Calculator';
	var wRef = p_session.Framework.FindWindow(SWC_handle);
	if (!wRef) {
		
		var SWC_title  = 'Calculator';
		var SWC_icon   = new PIcon('/graphics/calculator.png', P_SMALLICON);
		var SWC_rect   = new PAutoRect(260, 370);
		var SWC_style  = WS_ALLOWCLOSE | WS_ALLOWMINIMIZE;
		var SWC_MessageHandler  = null;
		var SWC_BackgroundColor = new PColor(0, 0, 0);
	
		var SWC_window = new PWindow(SWC_handle, SWC_title, SWC_rect, SWC_icon, SWC_style, SWC_MessageHandler, SWC_BackgroundColor);
	
		wRef = p_session.Framework.CreateWindow(SWC_window);
		SWC_ClientAreaURL = '/Framework/CoreSystem/Widgets/Calculator/HTMLResources/Calculator.cfm';
		SWC_ClientAreaURL += '?num=' + escape(num);
		
		wRef.LoadClientArea(SWC_ClientAreaURL);
	
	}
	
	// ******************
	// set up the accelerators
	
	// NUMBERS
	InstallAC(new AC(AC_LOCAL, SWC_handle, 48, '0',	cl0));
	InstallAC(new AC(AC_LOCAL, SWC_handle, 49, '1',	cl1));
	InstallAC(new AC(AC_LOCAL, SWC_handle, 50, '2',	cl2));
	InstallAC(new AC(AC_LOCAL, SWC_handle, 51, '3',	cl3));
	InstallAC(new AC(AC_LOCAL, SWC_handle, 52, '4',	cl4));
	InstallAC(new AC(AC_LOCAL, SWC_handle, 53, '5',	cl5));
	InstallAC(new AC(AC_LOCAL, SWC_handle, 54, '6',	cl6));
	InstallAC(new AC(AC_LOCAL, SWC_handle, 55, '7',	cl7));
	InstallAC(new AC(AC_LOCAL, SWC_handle, 56, '8',	cl8));
	InstallAC(new AC(AC_LOCAL, SWC_handle, 57, '9',	cl9));
	InstallAC(new AC(AC_LOCAL, SWC_handle, 67, 'C',	clClear));
	InstallAC(new AC(AC_LOCAL, SWC_handle, 99, 'c',	clClear));
	
	
	// OPERATORS
	InstallAC(new AC(AC_LOCAL, SWC_handle, 43, '+',	clAdd));
	InstallAC(new AC(AC_LOCAL, SWC_handle, 45, '-',	clSubtract));
	InstallAC(new AC(AC_LOCAL, SWC_handle, 42, '*',	clMultiply));
	InstallAC(new AC(AC_LOCAL, SWC_handle, 47, '/',	clDivide));
	InstallAC(new AC(AC_LOCAL, SWC_handle, 13, '=',	clEquals));
	
	// DECIMAL POINT
	InstallAC(new AC(AC_LOCAL, SWC_handle, 46, '.',	clPoint));
	
};

function TESTCalculatorMessageHandler(handle, msg_id, sender_component, message_object)
{
	var wRef = p_session.Framework.FindWindow(handle);
	
	switch(msg_id) {
		case IWC_KEYPRESSED:
			alert("Scan Code: " + message_object.ScanCode);
			break;
		default:
			p_session.Framework.DefaultMessageHandler(handle, msg_id, sender_component, message_object);
	}
}


// SUPPORT
function clClear() {
	CalculatorResult = null;
	putResult();
}

function clCopy() {
	
}

// OPERATORS
function clAdd() {
	cltok('+');
}

function clSubtract() {
	cltok('-');
}

function clMultiply() {
	cltok('*');
}

function clDivide() {
	cltok('/');
}

function clEquals () {
	if (CalculatorResult) {
		var tmp;
		tmp = eval(CalculatorResult);
	
		CalculatorResult = tmp;
		putResult();
	}
}


// NUMBERS
function cl0() {
	clnum(0);
}

function cl1() {
	clnum(1);
}

function cl2() {
	clnum(2);
}

function cl3() {
	clnum(3);
}

function cl4() {
	clnum(4);
}

function cl5() {
	clnum(5);
}

function cl6() {
	clnum(6);
}

function cl7() {
	clnum(7);
}

function cl8() {
	clnum(8);
}

function cl9() {
	clnum(9);
}

function clPoint() {
	if (CalculatorResult) {
		if (CalculatorResult.indexOf('.') == -1) {
			CalculatorResult = CalculatorResult + '.';
		}
	}
	
	putResult();	
}

// other gruntwork...

var CalculatorResult = null;

function clnum(num) {
	if (CalculatorResult) {
		CalculatorResult = CalculatorResult + num.toString();
	}
	else {
		CalculatorResult = num.toString();
	}
	putResult();
}

function cltok(tok) {
	var slen = CalculatorResult.length;
	
	var rm = CalculatorResult.toString().charAt(slen - 1);
	if(!isOp(rm)) {
		CalculatorResult = CalculatorResult + tok;
	}
	else {
		errbox = new AlertBox("\'" + rm.toString() + tok.toString() + "\' is not a valid arithmetic expression.", "Calculator Error", "/graphics/AppIconResources/crystal_project/32x32/apps/calc.png");
		errbox.Show();
	}
	putResult();
}

function isOp(tok) {
	switch(tok) {
		case '+':
		case '-':
		case '*':
		case '/':
			return true;
			break;
		default:
			return false;
			break;
	}
} /*isOp()*/

function putResult() {
	if (CalculatorResult) {
		SetInnerHTML('Ca_Result', CalculatorResult.toString());														
	}
	else {
		SetInnerHTML('Ca_Result', '');
	}
}
	
	
	